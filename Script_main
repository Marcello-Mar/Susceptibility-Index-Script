# Copyright (C) 2025 Marcello Mariani
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# ----------------- IMPORTS -----------------
import pandas as pd
import numpy as np
from google.colab import files
from itertools import combinations
from scipy.stats import beta
import matplotlib.pyplot as plt
import io
from openpyxl import Workbook
from openpyxl.drawing.image import Image
from openpyxl.utils.dataframe import dataframe_to_rows
from dataclasses import dataclass
from typing import List, Tuple, Dict, Optional, Union

# ----------------- DATA CLASSES -----------------
@dataclass
class AntibioticResult:
    name: str
    s_percentage: float
    lower_ci: float
    upper_ci: float
    s_count: int
    r_count: int
    tested_percentage: Optional[float] = None

@dataclass
class CombinationResult:
    combination: Tuple[str, str]
    effectiveness: float
    global_effectiveness: float
    lower_ci: float
    upper_ci: float
    lower_ci_global: float
    upper_ci_global: float
    s_count: int
    r_count: int
    tested_percentage: float

# ----------------- CORE ANALYZER CLASS -----------------
class AntibioticAnalyzer:
    VALID_VALUES = {'S', 'R', 'N'}
    CONFIDENCE_LEVEL = 0.95

    def __init__(self, file_path: str):
        self.data = self._load_and_validate_data(file_path)
        self.antibiotic_columns = self.data.columns[1:]

    def _load_and_validate_data(self, file_path: str) -> pd.DataFrame:
        """Load and validate Excel data file"""
        try:
            data = pd.read_excel(file_path)

            if data.columns[0] != 'Microorganism':
                data.rename(columns={data.columns[0]: 'Microorganism'}, inplace=True)

            data.iloc[:, 1:] = data.iloc[:, 1:].apply(
                lambda col: col.str.upper() if col.dtype == 'object' else col
            )
            data.replace({'I': 'S'}, inplace=True)
            data.fillna('N', inplace=True)

            self._validate_data(data)
            return data

        except Exception as e:
            raise ValueError(f"Error loading file: {e}")

    def _validate_data(self, data: pd.DataFrame):
        """Validate data structure and values"""
        invalid_cells = [
            (i + 2, col) for i, row in data.iloc[:, 1:].iterrows()
            for col, value in row.items() if value not in self.VALID_VALUES
        ]

        if invalid_cells:
            error_msg = "\n".join(
                f"Invalid value in Row {row}, Column {col}"
                for row, col in invalid_cells
            )
            raise ValueError(f"Invalid values detected:\n{error_msg}")

    def _apply_threshold_filter(self, threshold: float) -> pd.DataFrame:
        """Filter antibiotics based on testing threshold"""
        threshold /= 100
        valid_columns = [
            col for col in self.data.columns[1:]
            if (self.data[col].isin(['S', 'R']).sum() / len(self.data)) >= threshold
        ]
        return self.data[['Microorganism'] + valid_columns]

    def _calculate_confidence_interval(self, p: float, n: int, confidence_level: float) -> Tuple[float, float]:
        """Calculate confidence interval using beta distribution"""
        alpha = 1 - confidence_level
        lower = beta.ppf(alpha/2, p * n, (1 - p) * n + 1)
        upper = beta.ppf(1 - alpha/2, p * n + 1, (1 - p) * n)
        return lower, upper

    def calculate_single_antibiotics(self, threshold: float = 0.5) -> List[AntibioticResult]:
        """Calculate effectiveness of single antibiotics"""
        filtered_data = self._apply_threshold_filter(threshold)
        results = []

        for col in filtered_data.columns[1:]:
            s_count = (filtered_data[col] == 'S').sum()
            r_count = (filtered_data[col] == 'R').sum()
            total = s_count + r_count

            if total > 0:
                s_percentage = (s_count / total) * 100
                lower_ci, upper_ci = self._calculate_confidence_interval(
                    s_percentage/100, total, self.CONFIDENCE_LEVEL
                )

                results.append(AntibioticResult(
                    name=col,
                    s_percentage=s_percentage,
                    lower_ci=lower_ci * 100,
                    upper_ci=upper_ci * 100,
                    s_count=s_count,
                    r_count=r_count,
                    tested_percentage=(total / len(filtered_data)) * 100
                ))

        return sorted(results, key=lambda x: x.s_percentage, reverse=True)

    def calculate_combinations(self, threshold: float = 0.5) -> List[CombinationResult]:
        """Calculate effectiveness of antibiotic combinations"""
        filtered_data = self._apply_threshold_filter(threshold)
        combinations_list = list(combinations(filtered_data.columns[1:], 2))
        results = []

        for comb in combinations_list:
            col1, col2 = comb
            mask = (filtered_data[col1] != 'N') | (filtered_data[col2] != 'N')

            s_count = ((filtered_data[col1] == 'S') | (filtered_data[col2] == 'S')).sum()
            r_count = ((filtered_data[col1] == 'R') & (filtered_data[col2] == 'R')).sum()
            tested_count = mask.sum()

            effectiveness = (s_count / tested_count * 100) if tested_count > 0 else 0
            global_effectiveness = (s_count / len(filtered_data)) * 100

            lower_ci, upper_ci = self._calculate_confidence_interval(
                effectiveness/100, tested_count, self.CONFIDENCE_LEVEL
            )

            lower_ci_global, upper_ci_global = self._calculate_confidence_interval(
                global_effectiveness/100, len(filtered_data), self.CONFIDENCE_LEVEL
            )

            results.append(CombinationResult(
                combination=comb,
                effectiveness=effectiveness,
                global_effectiveness=global_effectiveness,
                lower_ci=lower_ci * 100,
                upper_ci=upper_ci * 100,
                lower_ci_global=lower_ci_global * 100,
                upper_ci_global=upper_ci_global * 100,
                s_count=s_count,
                r_count=r_count,
                tested_percentage=(tested_count / len(filtered_data)) * 100
            ))

        return sorted(results, key=lambda x: x.effectiveness, reverse=True)

# ----------------- VISUALIZATION CLASS -----------------
class ResultsVisualizer:
    @staticmethod
    def plot_results(single_results: List[AntibioticResult],
                     combination_results: List[CombinationResult],
                     num_to_display: Dict[str, int] = {'single': 10, 'combinations': 10}) -> plt.Figure:
        """Visualize results in horizontal bar charts"""
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))

        # Single antibiotics plot
        top_single = sorted(single_results, key=lambda x: x.s_percentage, reverse=True)[:num_to_display['single']]
        y_pos = np.arange(len(top_single))
        s_percentages = [x.s_percentage for x in top_single]
        lower_errors = [x.s_percentage - x.lower_ci for x in top_single]
        upper_errors = [x.upper_ci - x.s_percentage for x in top_single]

        ax1.barh(
            y_pos,
            s_percentages,
            xerr=[lower_errors, upper_errors],
            capsize=5,
            color='#1f77b4'
        )
        ax1.set_yticks(y_pos)
        ax1.set_yticklabels([x.name for x in top_single])
        ax1.set_title('Top Single Antibiotics by Susceptibility')
        ax1.set_xlabel('Susceptibility Percentage (%)')
        ax1.grid(axis='x', linestyle='--', alpha=0.7)

        # Combinations plot
        top_comb = sorted(combination_results, key=lambda x: x.effectiveness, reverse=True)[:num_to_display['combinations']]
        y_pos_comb = np.arange(len(top_comb))
        effectiveness = [x.effectiveness for x in top_comb]
        lower_errors_comb = [x.effectiveness - x.lower_ci for x in top_comb]
        upper_errors_comb = [x.upper_ci - x.effectiveness for x in top_comb]

        ax2.barh(
            y_pos_comb,
            effectiveness,
            xerr=[lower_errors_comb, upper_errors_comb],
            capsize=5,
            color='#2ca02c'
        )
        ax2.set_yticks(y_pos_comb)
        ax2.set_yticklabels([f"{x.combination[0]} + {x.combination[1]}" for x in top_comb])
        ax2.set_title('Top Antibiotic Combinations by Effectiveness')
        ax2.set_xlabel('Effectiveness Percentage (%)')
        ax2.grid(axis='x', linestyle='--', alpha=0.7)

        plt.tight_layout()
        return fig

# ----------------- EXPORTER CLASS -----------------
class ResultsExporter:
    @staticmethod
    def to_excel(single_results: List[AntibioticResult],
                 combination_results: List[CombinationResult],
                 figure: Optional[plt.Figure] = None,
                 filename: str = "antibiotic_results.xlsx") -> None:
        """Export results to Excel file with optional graph"""
        # Create a new workbook
        wb = Workbook()
        wb.remove(wb.active)  # Remove default sheet

        # Add single antibiotics sheet
        ws_single = wb.create_sheet("Single Antibiotics")
        single_df = pd.DataFrame([vars(r) for r in single_results])
        for r in dataframe_to_rows(single_df, index=False, header=True):
            ws_single.append(r)

        # Add combinations sheet
        ws_comb = wb.create_sheet("Combinations")
        comb_df = pd.DataFrame([vars(r) for r in combination_results])
        comb_df['Combination'] = comb_df['combination'].apply(lambda x: f"{x[0]} + {x[1]}")
        comb_df.drop('combination', axis=1, inplace=True)
        for r in dataframe_to_rows(comb_df, index=False, header=True):
            ws_comb.append(r)

        # Add graph if provided
        if figure:
            img_stream = io.BytesIO()
            figure.savefig(img_stream, format='png', bbox_inches='tight', dpi=300)
            img_stream.seek(0)

            ws_graph = wb.create_sheet('Graphs')
            img = Image(img_stream)
            ws_graph.add_image(img, 'A1')

        # Save and download the file
        wb.save(filename)
        files.download(filename)
        print(f"Results successfully exported to {filename}")

# ----------------- MAIN FUNCTION -----------------
def main():
    try:
        # Configuration
        print("Antibiotic Resistance Analysis Tool")
        print("----------------------------------")

        # File upload
        print("\nPlease upload your Excel file with antibiotic susceptibility data")
        uploaded = files.upload()
        file_path = next(iter(uploaded))

        if not file_path.endswith('.xlsx'):
            raise ValueError("Please upload a valid Excel file (.xlsx)")

        # Parameter input
        threshold = float(input("\nEnter minimum testing threshold (0-100): "))
        num_single = int(input("Number of single antibiotics to display: "))
        num_comb = int(input("Number of combinations to display: "))

        # Analysis
        print("\nAnalyzing data...")
        analyzer = AntibioticAnalyzer(file_path)
        single_results = analyzer.calculate_single_antibiotics(threshold)
        comb_results = analyzer.calculate_combinations(threshold)

        # Visualization
        print("Generating visualizations...")
        visualizer = ResultsVisualizer()
        fig = visualizer.plot_results(
            single_results,
            comb_results,
            num_to_display={'single': num_single, 'combinations': num_comb}
        )
        plt.show()

        # Export
        print("Exporting results...")
        exporter = ResultsExporter()
        exporter.to_excel(single_results, comb_results, fig)

    except ValueError as ve:
        print(f"\nInput Error: {str(ve)}")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {str(e)}")
        if hasattr(e, 'args') and e.args:
            print("Details:", *e.args)

if __name__ == "__main__":
    main()
